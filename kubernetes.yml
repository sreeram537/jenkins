---
#### Starting with creation of the Jenkins NAMESPACE
apiVersion: v1
kind: Namespace
metadata:
  name: devops-tools

# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: default
#   namespace: devops-tools

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: jenkins-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: devops-tools
  
---
  
# #### Creating the volume for data persistence
 apiVersion: v1
 kind: PersistentVolume
 metadata:
   name: jenkins-home
   namespace: devops-tools
 spec:
   accessModes:
     - ReadWriteOnce
   capacity:
     storage: 5Gi
   hostPath:
     path: /data/jenkins-home/
awsElasticBlockStore:  
  volumeID: aws://us-east-2a/vol-0f00c29607751a106
  fsType: xfs 
---
  
##### Creating the volume claim
#kind: PersistentVolumeClaim
#apiVersion: v1
#metadata:
#  name: jenkins-data
#  namespace: devops-tools
#spec:
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: 2Gi
  
---
  
##### Creating the deployment
kind: Deployment
apiVersion: apps/v1
metadata:
  name: jenkins
  namespace: devops-tools
spec:
  replicas: 1
  selector:
    matchLabels:
      app: master
  template:
    metadata:
      labels:
        app: master
        tooltype: jenkins
    spec:
      containers:
        - name: jenkins
          image: ravindranathbarathy/jenkins-master:latest
          env:
            - name: JAVA_OPTS
              value: -Djenkins.install.runSetupWizard=false
          ports:
            - name: http-port
              containerPort: 8080
            - name: jnlp-port
              containerPort: 50000
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
            - mountPath: /var/run 
              name: docker-sock 
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: jenkins-home
          persistentVolumeClaim:
            claimName: jenkins-pvc
        - name: docker-sock 
          hostPath: 
            path: /var/run 
---
kind: Service
apiVersion: v1
metadata:
  name: jenkins-ui
  namespace: devops-tools
  labels:
    tooltype: jenkins
spec:
  type: LoadBalancer
  selector:
    app: master
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: ui

---
kind: Service
apiVersion: v1
metadata:
  name: jenkins-discovery
  namespace: devops-tools
spec:
  selector:
    app: master
  ports:
    - protocol: TCP
      port: 50000
      targetPort: 50000
      name: slaves
  
# ---

# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: jenkins
#   namespace: devops-tools
# spec:
#   tls:
#   - secretName: tls
#   backend:
#     serviceName: jenkins-ui
#     servicePort: 8080
